%% Computational Fluid Dynamics 2015 | Coursework 1: Section 5
%NAME: Solving the advection-diffusion equation
%GOAL: Comparing the stability of an explicit scheme approximating the diffusion term by a centered scheme and the advection term by i) a centred scheme ii) an Euler/upwind first order scheme
%Created by: SERGIU PETRE ILIEV. Date: 30.XI.2015
%Imperial College London | Aeronautical Engineering | Prof. Sherwin Spencer | AE3-414 Computational Fluid Dynamics | Coursework I

%Clean and prepare workspace
clear all           % Clear all variables
clc                 % Clear the window
close all           % Close open figures
format long;        % Display more decimal places of the solution

%% Initialization of Parameters
% Global parameters
a=1;                % Advection speed (constant)
alpha=0.003;        % Diffusivity (constant)

% Space parameters
dx=0.01;            % Length of the space step i.e. resolution of the grid space
x=0:dx:1;           % Creating an uniform 1D grid by defining all its points as a vector
nx=size(x,2);       % Determine the number of grid points in space

% Time parameters
dt=0.001;           % Duration of the time step
t=0:dt:1;           % Creating the timeline by defining all moments in time as a vector
nt=size(t,2);       % Determine the number of timesteps

% Preallocate an empty matrix for the solutions in order to speed up the computation in Matlab. Each row of the u matrix contains the velocities in the entire 1D domain at the time step number corresponding to the row number. In other words, each column contains all the velocities values taken by the flow at that grid point as time progresses.
u=zeros(nt,nx);     % This is the matrix destined to hold the solutions generated by the first numerical scheme (i)
uii=zeros(nt,nx);   % This is the matrix destined to hold the solutions generated by the second numerical scheme (ii) - for computational efficiency this line can be removed and use u=uii before starting the solvers, but it is easier to read the code if it is explicitly introduced here.

%% Do a basic stability check using the Courant number
C=a*dt/dx;          % Calculate the Courant number
if C<1 && C>0       % Check if it is within the stability bounds
    disp('Courant number in within [0,1], simulation is expected to be stable with the current time & space step sizes. Proceeding with CFD solvers...')
else
    disp('Simulation is expected to be unstable, as the Courant number is out of the [0,1] bounds! Proceeding with CFD solvers...')
end

%% Define the initial conditions
% At time 0 the velocity distribution is known in the entire mesh
for m=0:1:4
    u(1,:)=u(1,:)+10.*((-1)^m*(4/((2*m+1)^2*pi()^2)).*sin((2*m+1).*pi().*x));
end
uii(1,:)=u(1,:);    % Assign the same initial conditions to the velocity distribution destined for the second numerical scheme  - for computational efficiency this can line be removed and u=uii could be used instead, right before starting the solvers. However, it is easier to read the code if it is explicitly introduced here.

% At the left-hand side of the gridspace we apply a Dirichlet condition (i.e. velocity is always 0 at the x=0 grid points)
u(:,1)=0;           % For the first numerical scheme (i)
uii(:,1)=0;         % For the second numerical scheme (ii)- for computational efficiency this line can be removed and use u=uii before starting the solvers, but it is easier to read the code if it is explicitly introduced here.

%% Numerically solve the equation
for n=1:nt-1        % Where c is a counter for time
    for s=2:nx      % Where s is a counter for space, here the loop is starting from 2 as we already defined the initial conditions at x=0
        if s==nx    % At the right hand side (i.e. when the space counter reaches point at the end of the grid) apply a periodic boundary condition
            u(n+1,s)=u(n,s-1);
            uii(n+1,s)=uii(n,s-1);  
        else        % For the rest of the grid simply apply the discretised version of the equations in the report:
            % For the explicit scheme approximating the diffusion term by a centered scheme and the advection term by i) a centred scheme
            du_diffusion=u(n,s+1)-2*u(n,s)+u(n,s-1);
            du_advection_i=u(n,s+1)-u(n,s-1);
            u(n+1,s)=u(n,s)-((a*dt)/(2*dx))*du_advection_i+((alpha*dt)/(dx^2))*du_diffusion;

            % For the explicit scheme approximating the diffusion term by a centered scheme and the advection term by ii) an Euler/upwind first order scheme
            duii_diffusion=uii(n,s+1)-2*uii(n,s)+uii(n,s-1);
            duii_advection_ii=uii(n,s)-uii(n,s-1);
            uii(n+1,s)=uii(n,s)-((a*dt)/dx)*duii_advection_ii+((alpha*dt)/(dx^2))*duii_diffusion;
        end
    end
end

%% Plot solution at T=0.5
hold all; grid on
title('Comparison of Numerical Solutions at T=0.5')
plot(x,u(1,:),'b-', 'LineWidth',1.5);                                    % Plot the initial velocity distribution
plot(x,u(round(nt/2),:),'r--', 'LineWidth',1.5)                          % Plot the numerical solution for T=0.5 for the first numerical scheme (i)
plot(x,uii(round(nt/2),:),'k-.', 'LineWidth',1.5)                        % Plot the numerical solution for T=0.5 for the second numerical scheme (ii)
ylabel('u (Velocity)'); xlabel('x (Grid Position)');    % Label the axis
legend('Initial Conditions', 'i) Centered scheme', 'ii) Upwind first order scheme', 'Location','northwest')

% %% Attempt to plot in 3D the evolution of the solution
% hold all; grid on
% title('Comparison of Numerical Solutions in 3D')
% view(3)
% time=zeros(1001,101);
% for c1=1:1001
%     for c2=1:101
%       time(c1,c2)=dx*c2;  
%     end
% end
% for ti=1:1001
%     plot3(x,time(:,ti),u(ti,:),'b-');                                    % Plot the initial velocity distribution
% end